{% set start_button = "Route.show.buttons.start"|trans %}
{% set end_button = "Route.show.buttons.end"|trans %}
{% set erase_button = "Route.show.buttons.erase"|trans %}
{% set pickup_button = "Route.show.buttons.pickup"|trans %}
{% set pickup_erase_button = "Route.show.buttons.pickupErase"|trans %}
{% set cancel_button = "Route.show.buttons.cancel"|trans %}
{% if id_map is not defined %}
    {% set id_map =  "mapa" %}
{% endif %}

<script type="text/javascript">
	var points=new Array;
	var events=new Array;
	POINT=function(lat,lng){
		this.latLng=new L.LatLng(lat,lng);
		var pick=false;
		this.pickup=pick;
		};
	var editable= {{ editable }};
	var realTime= {{ realTime }};
	{% if resume is defined %}var resume= {{ resume }};
	{% else %}var resume=false;
	{% endif %}
	timeFromLastUpdate=0;
	
	lastId="0";
	if(!editable){
			$("#comenzar").hide();
			$("#deshacer").hide();
			$("#enviar").hide();								
		};
	// if(realTime)lastRoute=lastRoute.replace("0","");
</script>
{% if routePoints is defined %}
	{% for point in routePoints  %}
	<script>
		var aux="new "+'{{ point.location }}'.replace(' ',',');
		aux=eval(aux);
		aux.pickUpText='{{ point.description }}';
		aux.pickup=('{{ point.pickup }}'==1);
		points.push(aux);
	</script>
	{%  endfor %}
	
{% endif %}





{% for event in rideEvents  %}
<script>
	{% if event.location.latitude is defined %} events.push(new POINT({{ event.location.latitude }},{{ event.location.longitude }}));{% endif %}
</script>
{%  endfor %}

<script type="text/javascript">
	var gk, topo, thunderforest, osm, waymarkedtrails;
	var menu=null;
	var last_actions=null
	var icon="leaflet-marker-icon leaflet-zoom-animated leaflet-clickable leaflet-marker-draggable";
	
	L.Icon.Default.imagePath = '{{ asset('bundles/sopinetopenmap/css/images') }}'; 
	L.Icon.Default.prototype.options.iconSize[1]=35;
	L.Icon.Default.prototype.options.iconSize[0]=22;
    gk = 'http://opencache.statkart.no/gatekeeper/gk';
    

    osm = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'tiles &copy; <a target="_blank" href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      styleId: 22677
    });
    // preload image icon
	$("#{{ id_map }}").append("<img id='preload' src="+"{{ asset('bundles/sopinetopenmap/css/images') }}"+"/marker-icon-start.png>");
	$("#preload").hide();
    // cloudmade APi Key and info
    var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/8ee2a50541944fb9bcedded5165f09d9/{styleId}/256/{z}/{x}/{y}.png',
    cloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade';
    var midnight   = L.tileLayer(cloudmadeUrl, {styleId: 999, attribution: cloudmadeAttribution}),
    motorways = L.tileLayer(cloudmadeUrl, {styleId: 46561, attribution: cloudmadeAttribution});
    
    waymarkedtrails = L.tileLayer('http://tile.waymarkedtrails.org/hiking/{z}/{x}/{y}.png', {
      maxZoom: 19,
      opacity: 0.5,
      attribution: 'overlay &copy; <a target="_blank" href="http://hiking.waymarkedtrails.org">Waymarked Trails</a> '
              + '(<a target="_blank" href="http://creativecommons.org/licenses/by-sa/3.0/de/deed.en">CC-BY-SA 3.0 DE</a>)'
    });
	if(points.length>1)var center=points[0].latLng;
	else center=new L.LatLng(37.8938548, -4.788015299999984)
    map = new L.Map('{{ id_map }}', {
      layers: [osm]
      ,center: center
      ,zoom: 16
      ,scrollWheelZoom: false
    });


    // Routing Machine plugin info
    router = function(m1, m2, cb) {
      var proxy = 'http://www2.turistforeningen.no/routing.php?url=';
      var route = 'http://www.yournavigation.org/api/1.0/gosmore.php&format=geojson&v=foot&fast=1&layer=mapnik';
      var params = '&flat=' + m1.lat + '&flon=' + m1.lng + '&tlat=' + m2.lat + '&tlon=' + m2.lng;
      $.getJSON(proxy + route + params, function(geojson, status) {
        if (!geojson || !geojson.coordinates || !geojson.coordinates.length === 0) {
          if (typeof console.error === 'function') {
            console.error('OSM router failed', geojson);
          }
          return cb(new Error());
        }
        return cb(null, L.GeoJSON.geometryToLayer(geojson));
      });
    }
  	
 
    routing = new L.Routing({
      position: 'bottomright'
      ,routing: {
        router: router
      }
      ,icons: {
      start: new L.Icon({iconUrl:"{{ asset('bundles/sopinetopenmap/css/images') }}"+'/marker-icon-start.png', iconSize: 22})
      ,end: new L.Icon({iconUrl:"{{ asset('bundles/sopinetopenmap/css/images') }}"+'/marker-icon-start.png', iconSize: 22})
      ,normal: new L.Icon({iconUrl:"{{ asset('bundles/sopinetopenmap/css/images') }}"+'/marker-icon.png', iconSize: [22,35],  iconAnchor: [10, 35]})
      }
      ,snapping: {
        layers: []
      }
      ,shortcut: {
    	    draw: {
    	      enable: 68    // 'd'
    	      , disable: 81  // 'q'
    	    }
      }
    });
 	 // Routing plugin methods overrided
	routing._waypointClickHandler= function(e){
		showPopUpMenu(e);
	}  

    map.addControl(routing);


   
    
    // Map GeoCoder Plugin info
    var options = {
    	  
    	  position: 'topright', /* The position of the control */
    	  text: 'Locate', /* The text of the submit button */
    	  bounds: null, /* a L.LatLngBounds object to limit the results to */
    	  email: null, /*
						 * an email string with a contact to provide to
						 * Nominatim. Useful if you are doing lots of queries
						 */
    	  callback: function (results) {
    	            var bbox = results[0].boundingbox,
    	                first = new L.LatLng(bbox[0], bbox[2]),
    	                second = new L.LatLng(bbox[1], bbox[3]),
    	                bounds = new L.LatLngBounds([first, second]);
	                
    	            this._map.fitBounds(bounds);
    	    }
    };
	geocoder = L.Control.Geocoder.nominatim(),
	
	control = L.Control.geocoder({
		collapsed: false /* Whether its collapsed or not */
		,geocoder: geocoder
		,placeholder: 'Locate'
		,errorMessage: "Nothing found."
	});
    control.markGeocode = function(result){
		map.setView(result.center);
    }
	control.addTo(map);
    routing.draw();



    
    // map custom events
    L.Map.prototype.disableRouting=function(){
    	$(".leaflet-marker-icon").css("pointer-events","none");
    	routing.draw(false);

    	if(routing.getWaypoints().length>0){
    	$("#enviar").removeAttr("disabled");
    	$("#enviar").css('opacity','1');
    	}
    	$("#comenzar").on('click',map.enableRouting);
    	$("#comenzar").html('<i class="fa fa-flag"></i>&nbsp'+'{{ start_button }}');

    	
    	
    };
    	
    L.Map.prototype.enableRouting=function(){	
        if(!editable)return;
		$(".leaflet-marker-icon").css("pointer-events","all");
		if(menu==null)routing.draw(true);

		$("#enviar").attr("disabled","disabled");
    	$("#enviar").css('opacity','0.7');
		$("#deshacer").on('click',map.removeLast);
		$("#comenzar").on('click',map.disableRouting);
		$("#comenzar").html('<i class="fa fa-flag"></i>&nbsp'+'{{ end_button }}');
		for(var marker in map._layers)if(map._layers[marker]._icon && map._layers[marker]._icon.className===icon)
			map._layers[marker].on('contextmenu',showPopUpMenu);
	
		
	};



	
	// data functions
	L.Map.prototype.getWaypoints=function(){
		return routing.getWaypoints();
	};
	
	L.Map.prototype.loadFromEvents=function(events){
		var i=0;
		if(typeof poly==='undefined'){
			poly=new L.polyline(events[i].latLng,{dashArray: "10, 20",color:"green"});
			poly.addTo(map);
			i++
		}
		for(;i<events.length;i++)poly.addLatLng(events[i].latLng);
	}

	L.Map.prototype.loadFromWaypoints=function(waypoints){
		for(var index=0;waypoints.length>index;index++){
		    var marker, latlng, last;

	    	latlng = waypoints[index].latLng;
	    
	    	if (routing.options.snapping) {
	      		latlng = L.LineUtil.snapToLayers(latlng, null, routing.options.snapping);
	    	}
	    	marker = new L.Marker(latlng);
	    	last = routing.getLast();

	    	routing._draw._trailer.setLatLngs([latlng, latlng]);
	    	routing.addWaypoint(marker, last, null, function(err, data) {
	      	// console.log(err, data);
	    	});
	    	if (last !== null) {
	    		routing._draw._trailer.setLatLngs([last.getLatLng(), latlng]);
			}
			marker.pickUp=waypoints[index].pickup;
			if(marker.pickUp)map.createPickUpWaypoint(marker,waypoints[index].pickUpText);
		}
	};   	

	$("form").submit(function(){
    	// create input
    	var pointList="";
    	if(document.getElementById("inputPoints")==null){
        	var lat=document.createElement("INPUT");
           	lat.id="inputPoints";
           	lat.name="inputPoints";
           	lat.type="hidden";
           	document.getElementById("form").appendChild(lat);  
    	}
    	
    	if(document.getElementById("distanceInput")==null){
        	var dist=document.createElement("INPUT");
           	dist.id="distanceInput";
           	dist.name="distanceInput";
           	dist.type="hidden";
           	document.getElementById("form").appendChild(dist);  
    	}
    	
    	if((routing.getLast()&&routing.getLast().pickUp==false)|| typeof routing.getLast().pickUp==='undefined'){
    		routing.getLast().pickUp=true;
        	routing.getLast().pickUpText="Punto fin";    		
        }
        
    	if((routing.getFirst()&&routing.getFirst().pickUp==false)|| typeof routing.getFirst().pickUp==='undefined'){
        	routing.getFirst().pickUp=true;
        	routing.getFirst().pickUpText="Punto inicio";
		}
    	// getting points info from map
    	for(var marker in map._layers)
        	if(map._layers[marker]._icon && map._layers[marker]._icon.className===icon){
    			if(pointList!=""){
    				pointList+=";";
        			}
    			if(!map._layers[marker].pickUp)map._layers[marker].pickUp=false;
    			var pick=+map._layers[marker].pickUp+','+(map._layers[marker].pickUpText || "");
           		pointList+=map._layers[marker]._latlng.lat+","+map._layers[marker]._latlng.lng+","+pick;
        };       	
       	// populate inputs
       	$("#cityInput").val($("#start").html().split(',')[1].slice(1));
    	$("#inputPoints").val(pointList);
    	$("#distanceInput").val(map.getDistance()); 
    });

	// methods
	L.Map.prototype.createPickUpWaypoint=function(marker,text){
		if(marker._icon){
			map.changeMarker(marker,'start');
			marker.pickUp=true;
			if(text==='Cargando')text=" ";
			marker.pickUpText=text;
			marker._icon.title=text;
		}	
	};
	
	L.Map.prototype.removePickUpWaypoint=function(marker){
		if(marker._icon){
			map.changeMarker(marker,'normal');
			marker.pickUp=false;
			marker.pickUpText=null;
			marker._icon.title="";
		}	
	};	
	
	L.Map.prototype.changeMarker=function(current,type){
		current._icon.src=routing.options.icons[type].options.iconUrl;
		if(type=='start'){
			current._icon.style.width='35px';
		   	current._icon.style.height='35px';
		}
		else{
			current._icon.style.width='22px';
		  	current._icon.style.height='35px';
		}
	}
	
	L.Map.prototype.removeLast=function(){
		if(routing.getLast())
			routing.removeWaypoint(routing.getLast(),function(){
				if(routing.getWaypoints.length==0)
				routing._segments.clearLayers()
				
				});
		}		
	
	L.Map.prototype.updateRouteInfo=function(e){
    	var first=routing.getFirst();
    	var last=routing.getLast();
    	var distance=0;
    	if(first){
        	map.createPickUpWaypoint(first,'Punto inicio');
    		if(first._routing.nextMarker && first._routing.nextMarker!==last && 
    	    		(!first._routing.nextMarker.pickUp || first._routing.nextMarker.pickUp==false
    	    			|| first._routing.nextMarker.pickUpText=='Punto inicio'))
					map.removePickUpWaypoint(first._routing.nextMarker);
    		first=first.getLatLng();
    		geocoder.reverse(first, map.options.crs.scale(16), function(results) {
				var r = results[0];
				var aux=r.name.split(',');
				aux.splice(1,2);
				aux.splice(3,1);								
				$("#start").html(aux.toString());
    		});
    	}
    	if(last){
        	map.createPickUpWaypoint(last,'Punto fin');
    		if(last._routing.prevMarker && last._routing.prevMarker!==routing.getFirst() &&
    	    		( !last._routing.prevMarker.pickUp ||last._routing.prevMarker.pickUp==false
    	    		|| last._routing.prevMarker.pickUpText=='Punto fin'))
    				map.removePickUpWaypoint(last._routing.prevMarker);
	  		last=last.getLatLng();
    		geocoder.reverse(last, map.options.crs.scale(16), function(results) {
				var r = results[0];
				var aux=r.name.split(',');
				aux.splice(1,2);
				aux.splice(3,1);
	    		$("#finish").html(aux.toString());
	    	});
    	}
    	if(first && last)$("#distance").html(map.getDistance()+" m");
    	$(".leaflet-marker-icon").on();
    	for(var marker in map._layers)if(map._layers[marker]._icon && map._layers[marker]._icon.className===icon)
        	map._layers[marker].on('contextmenu',showPopUpMenu);

    	routing.rerouteAllSegments(function(){});
    	// routing._segments.clearLayers();
    };
    
	L.Map.prototype.showResumeInfo=function(){
    	if(events){
    		var first=events[0].latLng;
    		if(events.length!=1)var last=events[events.length-2].latLng;
    		else last=first;
    		var distance=0;
    		if(first){
    			geocoder.reverse(first, map.options.crs.scale(16), function(results) {
					var r = results[0];
					var aux=r.name.split(',');
					aux.splice(1,2);
					aux.splice(3,1);								
					$("#start_resume").html(aux.toString());
    			});
    		}
    		if(last){
    			geocoder.reverse(last, map.options.crs.scale(16), function(results) {
					var r = results[0];
					var aux=r.name.split(',');
					aux.splice(1,2);
					aux.splice(3,1);
	    			$("#finish_resume").html(aux.toString());			    		
	    		});
    		}
    		var aux_distance=new Array();
    		for(var i=0;i<events.length-1;i++)aux_distance.push(events[i].latLng);
    		if(first && last){
    			var distance=map.getDistance(aux_distance);
    			$("#distance_resume").html(distance+" m");
    			$("#enviroment_resume").html((distance*0.0001).toFixed(2)+" litros de carburante");
    			$("#safe_resume").html((distance*0.0001*1.5).toFixed(2)+" € en carburante");    
    			$("#pollution_resume").html((distance*0.0001*0.4).toFixed(2)+" kg"); 
    		}

    		routing.rerouteAllSegments(function(){});
    	}
    	// routing._segments.clearLayers();
    };
    
	L.Map.prototype.getDistance=function(points){
    	var distance=0;
    	if(points){
        	for(var i=0;points.length-1>i;i++){
				var actual=points[i];
				var next=points[i+1];
				distance+=Math.floor(actual.distanceTo(next));
        	}
        }
    	else{
        	for(var i=0;map.getWaypoints().length-1>i;i++){
				var actual=map.getWaypoints()[i];
				var next=map.getWaypoints()[i+1];
				distance+=Math.floor(actual.distanceTo(next));
        	}
		}    	
		return distance;
    };


    // PopUpMenu Layer and Event
    var PopUpMenu = L.Class.extend({
    	

   	 	initialize: function (latlng, marker) {
    	    // save position of the layer or any options from the constructor
        	this._latlng = latlng;
        	this._marker = marker;
    	},
    	
    	removeWaypoint: function(e){
           routing.removeWaypoint(this._marker, function(){routing._draw.disable()});
           if(routing.getWaypoints().length>0)routing.rerouteAllSegments(function(){});
           // last_events.push(map.removePickUpWaypoint(this).bind(this._marker));
           map.removeLayer(menu);
           stop(e);
    	},

    	pickUpWaypoint: function(e){
        	map.createPickUpWaypoint(this._marker,$("#textRecogida").val());
            map.removeLayer(menu);
            last_events.push(map.removePickUpWaypoint(this).bind(this._marker));
            stop(e);
        },
        
    	removePickUpWaypoint: function(e){
        	map.removePickUpWaypoint(this._marker);
        	routing.rerouteAllSegments(function(){});
            map.removeLayer(menu);
            stop(e);
        },     
           
    	cancelMenu: function(e){
            map.removeLayer(menu);
            stop(e);
        },
        
        onAdd: function (map) {
        	this._map = map;
    		map.disableRouting();

    	    // create a DOM element and put it into one of the map panes
        	this._el = L.DomUtil.create('div', 'pop-up-menu leaflet-zoom-hide');
        	map.getPanes().popupPane.appendChild(this._el);

            // ... initialize other DOM elements, add listeners, etc.

            var r=document.createElement("button");
			r.id="{{ id_map }}_recogida";
			document.getElementById("{{ id_map }}").appendChild(r);
			var recogida=$("#{{ id_map }}_recogida");
			recogida.attr('type','button');
			
			if(!this._marker.pickUp || this._marker.pickUp==false){ 
				recogida.html('{{ pickup_button }}');// "Crear punto de
														// recogida"
				var pickUp=this.pickUpWaypoint.bind(this);
				recogida.on('click',pickUp);
				
			
			}
			else{
				recogida.html('{{ pickup_erase_button }}');// "Eliminar punto
															// de recogida"
				var pickUp=this.removePickUpWaypoint.bind(this);
				recogida.on('click',pickUp);
			}	

			if(!this._marker.pickUp || this._marker.pickUp==false){ 
				var t=document.createElement("input");
				t.id="{{ id_map }}_textRecogida";
				document.getElementById("{{ id_map }}").appendChild(t);
				var text=$("#{{ id_map }}_textRecogida");
				text.attr('type','input');
				if(this._marker.pickUpText)	text.val(this._marker.pickUpText);
				else{
					text.val('Cargando');
					geocoder.reverse(this._marker.getLatLng(), map.options.crs.scale(24), function(results) {
						var r=results[0];
						text.val(results[0].name.split(',')[0]);
    	    		});
				}
			}
			
			var b=document.createElement("button");	
			b.id="{{ id_map }}_borrar";
			document.getElementById("{{ id_map }}").appendChild(b);
			var borrar=$("#{{ id_map }}_borrar");
			borrar.attr('type','button');
			borrar.css('width','100%');
			borrar.html('{{ erase_button }}');// Borrar punto
	

			var erase=this.removeWaypoint.bind(this);
			borrar.on('click',erase);

			var c=document.createElement("button");	
			c.id="{{ id_map }}_cancelar";
			document.getElementById("{{ id_map }}").appendChild(c);
			var cancelar=$("#{{ id_map }}_cancelar");
			cancelar.attr('type','button');
			cancelar.css('width','100%');
			cancelar.html('{{ cancel_button }}');// Cancelar Acción

			var cancel=this.cancelMenu.bind(this);
			cancelar.on('click',cancel);
			
			recogida.appendTo($(".pop-up-menu"));
			if(!this._marker.pickUp || this._marker.pickUp==false)text.appendTo($(".pop-up-menu"));
			borrar.appendTo($(".pop-up-menu"));
			cancelar.appendTo($(".pop-up-menu"));
			
        	// add a viewreset event listener for updating layer's position, do
			// the latter
 	      	map.on('viewreset', this._reset, this);
    	    this._reset();
    	},

    	onRemove: function (map) {
     	   // remove layer's DOM elements and listeners
     	    $("#textRecogida").remove();
     	   	$("#recogida").remove();
     	    $("#borrar").remove();
     	    $("#cancelar").remove()
     	   	map.getPanes().popupPane.removeChild(this._el);
    	    map.off('viewreset', this._reset, this);
    	    routing.rerouteAllSegments(this._reset);
    	    setTimeout(map.enableRouting, 500);
    	    menu=null;
    	    map.updateRouteInfo();
   	 	},

    	_reset: function () {
     	   // update layer's position
     	   if(this._latlng){
      	  	var pos = map.latLngToLayerPoint(this._latlng);
     	   	L.DomUtil.setPosition(this._el, pos);
     	   }
   	 	}
      
	});



    
	var showPopUpMenu=function(e){
		if(menu!=null)return;
		if(e.marker){
			menu=new PopUpMenu(e.marker._latlng,e.marker);
			map.setView(e.marker._latlng);
		}
		else{ 
			menu=new PopUpMenu(e.latlng,e.target);
			map.setView(e.latlng);
		}
		map.addLayer(menu,false);
		$(".pop-up-menu").focus();
		$(".pop-up-menu").css({'background':'grey'});
	}



	//
	// param{string/timestamp} a
	// return number time in secs
	//
	var timestampToSecs=function(a){
		return(a.split(" ")[0]*360+a.split(" ")[1]*60+a.split(" ")[0]*1);
		}
	lastId=0;
	var addLast=function(){
		$.ajax({
			url: lastRoute+lastId
			,success: function(response){
				if(response.length==0)timeFromLastUpdate+=0;
				else{
					for(var i=0;i<response.length;i++){
					lastId=response[i].id;
					switch(response[i].action){
						case 'point':
							map.eventManager.addPoint(response[i]);
							break;
						case 'in':
							map.eventManager.joinChild(response[i]);
							break;
						case 'out':
							map.eventManager.disjoinChild(response[i]);
							break;
						case 'finish':
							map.eventManager.finishRoute(response[i]);
							clearInterval(dbRequest);
							break;
						case 'report':
							map.eventManager.addIssue(response[i]);
							break;
						}
					}
					map.eventManager.updateTrazeoIcon(response[i-1]);
				}
			}
			,error: function(XMLHttpRequest, textStatus, errorThrown)
			{
				console.log('Error : ' + errorThrown);
			}
		})

	}

	// Event Manager(handle events from DB)
	L.Map.prototype.eventManager=
		{
			addPoint: function(response){
				// tiempo de respuesta cortado
				if(timeFromLastUpdate>120)this.conexionLostHandler(response);
				// evento nuevo
				else{
					var point=new POINT(response.location.latitude,response.location.longitude);
					if(typeof poly==='undefined'){
						poly=new L.polyline(point.latLng,{dashArray: "10, 20",color:"green"});	
						poly.addTo(map);
					}
					
					else poly.addLatLng(point.latLng);
					timeFromLastUpdate=0;
				}
				
			}
		,updateTrazeoIcon: function(response){
			if($('.trazeo-map-icon').length==0){
				var htmlInner='<img class="img-responsive pull-left" width="25" height="25" src="../../../../images/trazeito.png" alt="Trazeo" title="Trazeo" style="position: absolute">';
				var myIcon = L.divIcon({className: 'trazeo-map-icon',html: htmlInner});
				var point=new POINT(response.location.latitude,response.location.longitude);
				// add join child icon to map
				trazeoMapMarker=L.marker(point.latLng, {icon: myIcon});
				trazeoMapMarker.addTo(map);	
			}
			else{
				var point=new POINT(response.location.latitude,response.location.longitude);
				trazeoMapMarker.setLatLng(point.latLng)
			}
		}
			
		,joinChild:	function(response){
			// tiempo de respuesta cortado
			if(timeFromLastUpdate>120)this.conexionLostHandler(response);

			var point=new POINT(response.location.latitude,response.location.longitude);
			// add join child icon to map
			var myIcon = L.divIcon({className: '',html: "<i class='fa fa-user fa-2x' id='"+response.id+"'></i>"});	
			L.marker(point.latLng, {icon: myIcon}).addTo(map);
			$("#"+response.id).css('cssText', 'color: green !important');
			// function for show name on hover
			// var nameChild=function(response){$("#"+this.id).append("<p
			// style='color: green; font-size:
			// 0.5em'>"+this.data.split('/')[1]+"</p>")}.bind(response);
			// var
			// clearChildName=function(response){$("#"+this.id).html('');}.bind(response);
			// $("#"+response.id).hover(nameChild,clearChildName);
		}
		
		,disjoinChild:	function(response){
			// tiempo de respuesta cortado
			if(timeFromLastUpdate>120)this.conexionLostHandler(response);
			var point=new POINT(response.location.latitude,response.location.longitude);
			// add join child icon to map
			var myIcon = L.divIcon({className: '',html: "<i class='fa fa-user fa-2x' id='"+response.id+"'></i>"});	
			L.marker(point.latLng, {icon: myIcon}).addTo(map);
			$("#"+response.id).css('cssText', 'color: red !important');
			// function for show name on hover
			// var nameChild=function(response){$("#"+this.id).append("<p
			// style='color: red; font-size:
			// 0.5em'>"+this.data.split('/')[1]+"</p>")}.bind(response);
			// var
			// clearChildName=function(response){$("#"+this.id).html('');}.bind(response);
			// $("#"+response.id).hover(nameChild,clearChildName);
			
		}
		
		,finishRoute:	function(response){
			// tiempo de respuesta excedido
			if(timeFromLastUpdate>120)this.conexionLostHandler(response);
			
			var point=new POINT(response.location.latitude,response.location.longitude);
			
			var myIcon = L.divIcon({className: '',html: "<i class='fa fa-flag fa-2x' id='"+response.id+"'></i>"});	
			L.marker(point.latLng, {icon: myIcon}).addTo(map);
			$("#"+response.id).css('cssText', 'color: green !important');
			// var finishHover=function(response){$("#"+this.id).append("<p
			// style='color: green; font-size: 0.5em'>final de
			// ruta</p>")}.bind(response);
			// var
			// clearFinishHover=function(response){$("#"+this.id).html('');}.bind(response);
			// $("#"+response.id).hover(nameChild,clearChildName);
			$("#"+response.id).attr('title','fin de ruta');
		}
		
		,addIssue:	function(response){
			// tiempo de respuesta excedido
			if(timeFromLastUpdate>120)this.conexionLostHandler(response);

			var point=new POINT(response.location.latitude,response.location.longitude);
				
			var myIcon = L.divIcon({className: '',html: "<i rel='tooltip-top' class='fa fa-exclamation-circle fa-2x' id='"+response.id+"'></i>"});	
			L.marker(point.latLng, {icon: myIcon}).addTo(map);
			$("#"+response.id).css('cssText', 'color: red !important');

			// var finishHover=function(response){$("#"+this.id).append("<p
			// rel='tooltip-up' style='color: red; font-size: 0.5em
			// title='"+this.data.split('/')[1]+"'></p>")}.bind(response);
			// var
			// clearFinishHover=function(response){$("#"+this.id).html('');}.bind(response);
			// $("#"+response.id).hover(nameChild,clearChildName);
			$("#"+response.id).attr('title',response.data.split('/')[1]);
		}
		
		/* DESACTIVADO POR AHORA */
		
		,conexionLostHandler: function(response){
			
			/*
			 * var point=new
			 * POINT(response.location.latitude,response.location.longitude);
			 * var
			 * lastPreviousPoint=poly.getLatLngs()[poly.getLatLngs().length-1];
			 * poly=new L.polyline(point.latLng,{dashArray: "10,
			 * 20",color:"green"}); poly.addTo(map); timeFromLastUpdate=0;
			 * 
			 * //Icons for conexion lost info
			 * 
			 * var myIcon = L.divIcon({className: '',html: "<i class='fa
			 * fa-minus-circle fa-2x' id='"+response.id+"'></i>"});
			 * L.marker(lastPreviousPoint, {icon: myIcon}).addTo(map);
			 * $("#"+response.id).css('cssText', 'color: red !important');
			 * //function for show alert on hover //var
			 * hover=function(response){$("#"+this.id).append("<p style='color: red; font-size: 0.5em'>En
			 * este punto se perdio la conexión</p>")}.bind(response); //var
			 * clearHover=function(response){$("#"+this.id).html('');}.bind(response);
			 * //$("#"+response.id).hover(hover,clearHover);
			 * $("#"+response.id).attr('title',response.data.split('/')[1]);
			 * 
			 * 
			 * 
			 * var myIcon = L.divIcon({className: '',html: "<i class='fa
			 * fa-minus-circle fa-2x' id='"+response.id+"_conexion'></i>"});
			 * L.marker(lastPreviousPoint, {icon: myIcon}).addTo(map);
			 * $("#"+response.id+'_conexion').css('cssText', 'color: red
			 * !important'); //function for show name on hover //var
			 * hover=function(response){$("#"+this.id+'_conexion').append("<p style='color: red; font-size: 0.5em'>En
			 * este punto se recupero la conexión</p>")}.bind(response); //var
			 * clearHover=function(response){$("#"+this.id+'_conexion').html('');}.bind(response);
			 * //$("#"+response.id+'_conexion').hover(hover,clearHover);
			 * $("#"+response.id).attr('title',response.data.split('/')[1]);
			 * 
			 * 
			 */	
		}
	};
	// Mapa tiempo real
	if(realTime){
	    //if(events.length>0)map.loadFromEvents(events);
		var dbRequest=setInterval(addLast,5000);
	}

    if(resume) setTimeout(map.showResumeInfo,1000);
    else setInterval(map.updateRouteInfo,1000);
    if(points)map.loadFromWaypoints(points);
    map.updateRouteInfo();
    map.disableRouting();






    /*
	 * SIMULATE EVENT SENDER var fakeEvents=[
	 * {"id":2,"action":"point","data":"","location":{"latitude":37.89613041,"longitude":-4.78772315},"created_at":"2014-05-07T12:57:44+0200","updated_at":"2014-05-07T12:57:44+0200"}
	 * ,{"id":3,"action":"point","data":"","location":{"latitude":37.89593041,"longitude":-4.78752310},"created_at":"2014-05-07T12:57:48+0200","updated_at":"2014-05-07T12:57:48+0200"}
	 * ,{"id":4,"action":"point","data":"","location":{"latitude":37.89573041,"longitude":-4.78732306},"created_at":"2014-05-07T12:57:58+0200","updated_at":"2014-05-07T12:57:58+0200"}
	 * ,{"id":5,"action":"point","data":"","location":{"latitude":37.89554544,"longitude":-4.7871335},"created_at":"2014-05-07T12:58:10+0200","updated_at":"2014-05-07T12:58:10+0200"}
	 * ,{"id":6,"action":"point","data":"","location":{"latitude":37.89534610,"longitude":-4.78692795},"created_at":"2014-05-07T12:58:20+0200","updated_at":"2014-05-07T12:58:20+0200"}
	 * ,{"id":7,"action":"point","data":"","location":{"latitude":37.89514747,"longitude":-4.78676005},"created_at":"2014-05-07T12:58:27+0200","updated_at":"2014-05-07T12:58:27+0200"}
	 * ,{"id":8,"action":"point","data":"","location":{"latitude":37.89496104,"longitude":-4.78654327},"created_at":"2014-05-07T12:58:39+0200","updated_at":"2014-05-07T12:58:39+0200"}
	 * ,{"id":10,"action":"in","data":"6/trazeo_niño_1","location":{"latitude":37.89496104,"longitude":-4.78654327},"created_at":"2014-05-07T12:58:39+0200","updated_at":"2014-05-07T12:58:39+0200"}
	 * ,{"id":11,"action":"out","data":"6/trazeo_niño_1","location":{"latitude":37.89496104,"longitude":-4.78654327},"created_at":"2014-05-07T12:58:39+0200","updated_at":"2014-05-07T12:58:39+0200"}
	 * ,{"id":9,"action":"point","data":"","location":{"latitude":37.89476429,"longitude":-4.7863204},"created_at":"2014-05-07T12:58:52+0200","updated_at":"2014-05-07T12:58:52+0200"}
	 * ,{"id":13,"action":"report","data":"6/report_1","location":{"latitude":37.89476429,"longitude":-4.7863204},"created_at":"2014-05-07T12:58:52+0200","updated_at":"2014-05-07T12:58:52+0200"}
	 * 
	 * ,{"id":12,"action":"point","data":"","location":{"latitude":37.89306429,"longitude":-4.7852204},"created_at":"2014-05-07T12:58:52+0200","updated_at":"2014-05-07T12:58:52+0200"}]
	 * 
	 * var fakeRequest=function(response){ switch(response.action){ case
	 * 'point': map.eventManager.addPoint(response); break; case 'in':
	 * map.eventManager.joinChild(response); break; case 'out':
	 * map.eventManager.disjoinChild(response); break; case 'finish':
	 * map.eventManager.finishRoute(response); clearInterval(dbRequest); break;
	 * case 'report': map.eventManager.addIssue(response); break; }
	 * map.eventManager.updateTrazeoIcon(response); }; fakeIndex=0;
	 * setInterval(function(){ if(fakeIndex>fakeEvents.length-1)return;
	 * console.log(fakeEvents[fakeIndex].action);
	 * fakeRequest(fakeEvents[fakeIndex]); fakeIndex++; }, 10);
	 */
</script>
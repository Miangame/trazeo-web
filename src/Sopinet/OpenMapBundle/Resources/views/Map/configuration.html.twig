<script type="text/javascript">
	var points=new Array;
	POINT=function(lat,lng){
		this.latLng=new L.LatLng(lat,lng);
		var pick=false;
		this.pickup=pick;
		};
	var editable= {{ editable }};
	var realTime= {{ realTime }};

	var addLast=function(){
		$.ajax({
			url: lastRoute
			,success: function(response){
				var point=response.replace(' ',',');
				var aux="new "+point;
		     	var point=eval(aux);
				poly.addLatLng(point.latLng);
				map.fitBounds(poly.getBounds());
			}
			,error: function(XMLHttpRequest, textStatus, errorThrown)
			{
				alert('Error : ' + errorThrown);
			}
		})

	}
</script>

{% for point in routePoints  %}
<script>
	var aux="new "+'{{ point.location }}'.replace(' ',',');
	
	points.push(eval(aux));
</script>
{%  endfor %}

<script type="text/javascript">
	var gk, topo, thunderforest, osm, waymarkedtrails;
	var menu=null;
	var flagMenu=null;
	var icon="leaflet-marker-icon leaflet-zoom-animated leaflet-clickable leaflet-marker-draggable";
	
	L.Icon.Default.imagePath = '{{ asset('bundles/sopinetopenmap/css/images') }}'; 

    gk = 'http://opencache.statkart.no/gatekeeper/gk';

    osm = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'tiles &copy; <a target="_blank" href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      styleId: 22677
    });

    //cloudmade APi Key and info
    var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/8ee2a50541944fb9bcedded5165f09d9/{styleId}/256/{z}/{x}/{y}.png',
    cloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade';
    var midnight   = L.tileLayer(cloudmadeUrl, {styleId: 999, attribution: cloudmadeAttribution}),
    motorways = L.tileLayer(cloudmadeUrl, {styleId: 46561, attribution: cloudmadeAttribution});
    
    waymarkedtrails = L.tileLayer('http://tile.waymarkedtrails.org/hiking/{z}/{x}/{y}.png', {
      maxZoom: 19,
      opacity: 0.5,
      attribution: 'overlay &copy; <a target="_blank" href="http://hiking.waymarkedtrails.org">Waymarked Trails</a> '
              + '(<a target="_blank" href="http://creativecommons.org/licenses/by-sa/3.0/de/deed.en">CC-BY-SA 3.0 DE</a>)'
    });

    map = new L.Map('mapa', {
      layers: [osm]
      ,center: new L.LatLng(37.8938548, -4.788015299999984)
      ,zoom: 16
    });


    //Routing Machine plugin info
    router = function(m1, m2, cb) {
      var proxy = 'http://www2.turistforeningen.no/routing.php?url=';
      var route = 'http://www.yournavigation.org/api/1.0/gosmore.php&format=geojson&v=foot&fast=1&layer=mapnik';
      var params = '&flat=' + m1.lat + '&flon=' + m1.lng + '&tlat=' + m2.lat + '&tlon=' + m2.lng;
      $.getJSON(proxy + route + params, function(geojson, status) {
        if (!geojson || !geojson.coordinates || !geojson.coordinates.length === 0) {
          if (typeof console.error === 'function') {
            console.error('OSM router failed', geojson);
          }
          return cb(new Error());
        }
        return cb(null, L.GeoJSON.geometryToLayer(geojson));
      });
    }
    
    routing = new L.Routing({
      position: 'topleft'
      ,routing: {
        router: router
      }
      ,icons: {
      start: new L.Icon({iconUrl:"{{ asset('bundles/sopinetopenmap/css/images') }}"+'/marker-icon-start.png'})
      ,end: new L.Icon({iconUrl:"{{ asset('bundles/sopinetopenmap/css/images') }}"+'/marker-icon-start.png'})
      ,normal: new L.Icon.Default()
      }
      ,snapping: {
        layers: []
      }
      ,shortcut: {
    	    draw: {
    	      enable: 68    // 'd'
    	      , disable: 81  // 'q'
    	    }
      }
    });
    map.addControl(routing);

   
    
    //Map GeoCoder Plugin info
    var options = {
    	  
    	  position: 'topright', /* The position of the control */
    	  text: 'Locate', /* The text of the submit button */
    	  bounds: null, /* a L.LatLngBounds object to limit the results to */
    	  email: null, /* an email string with a contact to provide to Nominatim. Useful if you are doing lots of queries */
    	  callback: function (results) {
    	            var bbox = results[0].boundingbox,
    	                first = new L.LatLng(bbox[0], bbox[2]),
    	                second = new L.LatLng(bbox[1], bbox[3]),
    	                bounds = new L.LatLngBounds([first, second]);
	                
    	            this._map.fitBounds(bounds);
    	    }
    };
	geocoder = L.Control.Geocoder.nominatim(),
	
	control = L.Control.geocoder({
		collapsed: false /* Whether its collapsed or not */
		,geocoder: geocoder
		,placeholder: 'Locate'
		,errorMessage: "Nothing found."
	});
    control.markGeocode = function(result){
		map.setView(result.center);
    }
	control.addTo(map);
    routing.draw();



    
    //map custom events    
    L.Map.prototype.disableRouting=function(){
    	$(".leaflet-marker-icon").css("pointer-events","none");
    	routing.draw(false);
    	
    	$("#enviar").removeAttr("disabled");
    	$("#comenzar").on('click',map.enableRouting);
    	$("#comenzar").html("Comenzar");
    	map.getPointsData();
    	return false;
    };
    	
    L.Map.prototype.enableRouting=function(){	
        if(!editable)return;
		$(".leaflet-marker-icon").css("pointer-events","all");
		if(menu==null)routing.draw(true);

		$("#enviar").attr("disabled","disabled");
		$("#comenzar").on('click',map.disableRouting);
		$("#comenzar").html("Terminar");
		for(var marker in map._layers)if(map._layers[marker]._icon && map._layers[marker]._icon.className===icon)
			map._layers[marker].on('contextmenu',showPopUpMenu);
	
		return false;
	};



	
	//API data
	L.Map.prototype.getWaypoints=function(){
		return routing.getWaypoints();
	};

	L.Map.prototype.loadFromWaypoints=function(waypoints){
		for(var index=0;waypoints.length>index;index++){
		    var marker, latlng, last;

	    	latlng = waypoints[index].latLng;
	    
	    	if (routing.options.snapping) {
	      		latlng = L.LineUtil.snapToLayers(latlng, null, routing.options.snapping);
	    	}
	    	marker = new L.Marker(latlng);
	    	last = routing.getLast();

	    	routing._draw._trailer.setLatLngs([latlng, latlng]);
	    	routing.addWaypoint(marker, last, null, function(err, data) {
	      	// console.log(err, data);
	    	});
	    	if (last !== null) {
	    		routing._draw._trailer.setLatLngs([last.getLatLng(), latlng]);
			}
			marker.pickUp=waypoints[index].pickup;
		}
	};   	



	
	//methods
	L.Map.prototype.createPickUpWaypoint=function(marker){

		if(marker._icon)marker._icon.src="{{ asset('bundles/sopinetopenmap/css/images') }}"+'/marker-icon-start.png';
		marker.pickUp=true;	
		};
		
	L.Map.prototype.updateRouteInfo=function(e){
    	var first=routing.getFirst();
    	var last=routing.getLast();
    	var distance=0;
    	if(first){
    		first=first.getLatLng();
    		geocoder.reverse(first, map.options.crs.scale(map.getZoom()), function(results) {
				var r = results[0];
				$("#finish").html("Empieza en: "+ r.name);
    		});
    	}
    	if(last){
    		last=last.getLatLng();
    		geocoder.reverse(last, map.options.crs.scale(map.getZoom()), function(results) {
				var r = results[0];
	    		$("#start").html("Termina en: "+ r.name);				    		
	    	});
    	}
    	if(first && last)$("#distance").html("Distancia: "+map.getDistance()+" m");
    	$(".leaflet-marker-icon").on();
    	for(var marker in map._layers)if(map._layers[marker]._icon && map._layers[marker]._icon.className===icon)
        	map._layers[marker].on('contextmenu',showPopUpMenu);
    	if(flagMenu){
        	map.enableRouting();
        	flagMenu=null;
		}
    };
    


    
	L.Map.prototype.getDistance=function(){
    	var distance=0;
		for(var i=0;map.getWaypoints().length-1>i;i++){
			var actual=map.getWaypoints()[i];
			var next=map.getWaypoints()[i+1];
			distance+=Math.floor(actual.distanceTo(next));
		}    	
		return distance;
    };


    
	L.Map.prototype.getPointsData=function(){
    	//create input
    	var pointList="";
    	if(document.getElementById("inputPoints")==null){
        	var lat=document.createElement("INPUT");
           	lat.id="inputPoints";
           	lat.name="inputPoints";
           	document.getElementById("mapa").appendChild(lat);  
    	}
    	//getting points info from map
    	for(var marker in map._layers)
        	if(map._layers[marker]._icon && map._layers[marker]._icon.className===icon){
    			if(pointList!=""){
    				pointList+=";";
        			}
    			if(!map._layers[marker].pickUp)map._layers[marker].pickUp=false;
    			var pick=+map._layers[marker].pickUp;
           		pointList+=map._layers[marker]._latlng.lat+","+map._layers[marker]._latlng.lng+","+pick;
        };       	
       	//populate input
    	$("#inputPoints").val(pointList); 
    };



   

    //PopUpMenu Layer and Event
    var PopUpMenu = L.Class.extend({
    	

   	 	initialize: function (latlng, marker) {
    	    // save position of the layer or any options from the constructor
        	this._latlng = latlng;
        	this._marker = marker;
    	},
    	
    	removeWaypoint: function(e){
           routing.removeWaypoint(this._marker, function(){});
           map.removeLayer(menu);
           stop(e);
    	},

    	pickUpWaypoint: function(e){
        	map.createPickUpWaypoint(this._marker);
            map.removeLayer(menu);
            stop(e);
        },
        
    	cancelMenu: function(e){
            map.removeLayer(menu);
            stop(e);
        },
        
        onAdd: function (map) {
        	this._map = map;
    		map.disableRouting();

    	    // create a DOM element and put it into one of the map panes
        	this._el = L.DomUtil.create('div', 'pop-up-menu leaflet-zoom-hide');
        	map.getPanes().overlayPane.appendChild(this._el);

            // ... initialize other DOM elements, add listeners, etc.
			var r=document.createElement("button");
			r.id="recogida";
			document.getElementById("mapa").appendChild(r);
			var recogida=$("#recogida");
			recogida.attr('type','button');
			recogida.html("Crear punto de recogida");
			var pickUp=this.pickUpWaypoint.bind(this);
			recogida.on('click',pickUp);
			
			var b=document.createElement("button");	
			b.id="borrar";
			document.getElementById("mapa").appendChild(b);  	
			var borrar=$("#borrar");
			borrar.attr('type','button');
			borrar.html("Borrar punto");
	

			var erase=this.removeWaypoint.bind(this);
			borrar.on('click',erase);

			var c=document.createElement("button");	
			c.id="cancelar";
			document.getElementById("mapa").appendChild(c);  	
			var cancelar=$("#cancelar");
			cancelar.attr('type','button');
			cancelar.html("Cancelar Acción");

			var cancel=this.cancelMenu.bind(this);
			cancelar.on('click',cancel);
			
			recogida.appendTo($(".pop-up-menu"));
			borrar.appendTo($(".pop-up-menu"));
			cancelar.appendTo($(".pop-up-menu"));
			
        	// add a viewreset event listener for updating layer's position, do the latter
 	      	map.on('viewreset', this._reset, this);
    	    this._reset();
    	},

    	onRemove: function (map) {
     	   // remove layer's DOM elements and listeners
     	   	$("#recogida").remove();
     	    $("#borrar").remove();
     	   	map.getPanes().overlayPane.removeChild(this._el);
    	    map.off('viewreset', this._reset, this);
    	    routing.rerouteAllSegments(this._reset);
    	    map.enableRouting();
    	    menu=null;
    	    flagMenu=true;
   	 	},

    	_reset: function () {
     	   // update layer's position
      	  var pos = this._map.latLngToLayerPoint(this._latlng);
     	   L.DomUtil.setPosition(this._el, pos);
   	 }
	});



    
	var showPopUpMenu=function(e){
		if(menu!=null)return;
		menu=new PopUpMenu(e.latlng,e.target);
		map.addLayer(menu);
		$(".pop-up-menu").focus();
		$(".pop-up-menu").css({'background':'grey'});
	}




	//Mapa tiempo real
	L.Map.prototype.realTimeUpdate= function(points){
			poly.setLatLngs(points);
		}
	
	//Metodo de Prueba para el mapa en tiempo real
	L.Map.prototype.generatePoint=function(){
			var punto=map.options.center;
			return punto;
		}    

	
	if(realTime){
		poly=L.polyline(map.generatePoint());
		poly.addTo(map);
		setInterval(addLast,30000);
	}



    setInterval(map.updateRouteInfo,3000);
    if(points)map.loadFromWaypoints(points);
    map.disableRouting();

</script>
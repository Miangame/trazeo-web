var gk, topo, thunderforest, osm, waymarkedtrails;


L.Icon.Default.imagePath = '/trazeo-web/src/Sopinet/OpenMapBundle/Resources/public/css/images';  

    gk = 'http://opencache.statkart.no/gatekeeper/gk';

    osm = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 19,
      attribution: 'tiles &copy; <a target="_blank" href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      styleId: 22677
    });

    //cloudmade APi Key and info
    var cloudmadeUrl = 'http://{s}.tile.cloudmade.com/8ee2a50541944fb9bcedded5165f09d9/{styleId}/256/{z}/{x}/{y}.png',
    cloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade';
    var midnight   = L.tileLayer(cloudmadeUrl, {styleId: 999, attribution: cloudmadeAttribution}),
    motorways = L.tileLayer(cloudmadeUrl, {styleId: 46561, attribution: cloudmadeAttribution});
    
    waymarkedtrails = L.tileLayer('http://tile.waymarkedtrails.org/hiking/{z}/{x}/{y}.png', {
      maxZoom: 19,
      opacity: 0.5,
      attribution: 'overlay &copy; <a target="_blank" href="http://hiking.waymarkedtrails.org">Waymarked Trails</a> '
              + '(<a target="_blank" href="http://creativecommons.org/licenses/by-sa/3.0/de/deed.en">CC-BY-SA 3.0 DE</a>)'
    });

    map = new L.Map('mapa', {
      layers: [osm]
      ,center: new L.LatLng(37.8938548, -4.788015299999984)
      ,zoom: 16
    });

    //L.control.layers({
       // 'Vista ciudad': osm,
      //  'Vista nocturna': midnight,
    //}, {
        //'Señalizar senderos': waymarkedtrails,
      //  'Señalizar autopistas': motorways
    //}).addTo(map);

    //map.attributionControl.addAttribution('&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors');


    //Routing Machine plugin info
    router = function(m1, m2, cb) {
      var proxy = 'http://www2.turistforeningen.no/routing.php?url=';
      var route = 'http://www.yournavigation.org/api/1.0/gosmore.php&format=geojson&v=foot&fast=1&layer=mapnik';
      var params = '&flat=' + m1.lat + '&flon=' + m1.lng + '&tlat=' + m2.lat + '&tlon=' + m2.lng;
      $.getJSON(proxy + route + params, function(geojson, status) {
        if (!geojson || !geojson.coordinates || !geojson.coordinates.length === 0) {
          if (typeof console.error === 'function') {
            console.error('OSM router failed', geojson);
          }
          return cb(new Error());
        }
        return cb(null, L.GeoJSON.geometryToLayer(geojson));
      });
    }
    routing = new L.Routing({
      position: 'topleft'
      ,routing: {
        router: router
      }
      ,snapping: {
        layers: []
      }
      ,shortcut: {
    	    draw: {
    	      enable: 68    // 'd'
    	      , disable: 81  // 'q'
    	    }
      }
    });
    map.addControl(routing);
    
    
    //Map GeoCoder Plugin info
    var options = {
    	    collapsed: false, /* Whether its collapsed or not */
    	    position: 'topright', /* The position of the control */
    	    text: 'Locate', /* The text of the submit button */
    	    bounds: null, /* a L.LatLngBounds object to limit the results to */
    	    email: null, /* an email string with a contact to provide to Nominatim. Useful if you are doing lots of queries */
    	    callback: function (results) {
    	            var bbox = results[0].boundingbox,
    	                first = new L.LatLng(bbox[0], bbox[2]),
    	                second = new L.LatLng(bbox[1], bbox[3]),
    	                bounds = new L.LatLngBounds([first, second]);
    	            this._map.fitBounds(bounds);
    	    }
    };
    
    var osmGeocoder = new L.Control.OSMGeocoder(options);
    map.addControl(osmGeocoder);
    
    
    map.doubleClickZoom.disable();
    routing.draw();
    
    //map custom events    
    var disableRouting=function(e){
    		e.originalEvent.stopPropagation();
    		
    		$(".leaflet-marker-icon").css("pointer-events","none");
    		routing.draw(false);
    		
    		$("form > button").removeAttr("disabled");
    		getPointsData();
    		map.once('dblclick', enableRouting);
    		return false;
    	};
    	
    var enableRouting=function(e){
		e.originalEvent.stop();
		
		$(".leaflet-marker-icon").css("pointer-events","all");
		routing.draw(true);

		$("form > button").attr("disabled","true");
		map.once('dblclick', disableRouting);
		return false;
	};
   	map.once('dblclick', disableRouting);
	$("form > button").attr("disabled","true");
	
	//API data
	var getWaypoints=function(){
		return routing.getWaypoints();
	};

    var loadFromWaypoints=function(waypoints){
		for(var index=0;waypoints.length>index;index++){
		    var marker, latlng, last;

		    latlng = waypoints[index];
		    
		    if (routing.options.snapping) {
		      latlng = L.LineUtil.snapToLayers(latlng, null, routing.options.snapping);
		    }
		    marker = new L.Marker(latlng);
		    last = routing.getLast();

		    routing._draw._trailer.setLatLngs([latlng, latlng]);
		    routing.addWaypoint(marker, last, null, function(err, data) {
		      // console.log(err, data);
		    });
		    if (last !== null) {
		    	routing._draw._trailer.setLatLngs([last.getLatLng(), latlng]);
			}
		}
		routing.draw();
	};   		
	
	//methods
    var updateRouteInfo=function(e){
    	var first=routing.getFirst();
    	var last=routing.getLast();
    	var distance=0;
    	if(first){
    		first=first.getLatLng();
    		$("#finish").html("Empieza en: "+ first.lat+" lat "+first.lng+" lng");
    	}
    	if(last){
    		last=last.getLatLng();
    		$("#start").html("Termina en: "+ last.lat+" lat "+last.lng+" lng");
    	}
    	if(first && last)$("#distance").html("Distancia: "+getDistance()+" m");
    }
    
    
    var getDistance=function(){
    	var distance=0;
		for(var i=0;getWaypoints().length-1>i;i++){
			var actual=getWaypoints()[i];
			var next=getWaypoints()[i+1];
			distance+=Math.floor(actual.distanceTo(next));
		}    	
		return distance;
    }
    
    var getPointsData=function(){
    	var waypoints=getWaypoints();
    	//create input
    	var points="";
    	if(document.getElementById("inputPoints")==null){
        	var lat=document.createElement("INPUT");
           	lat.id="inputPoints";
           	lat.name="inputPoints";
           	
           	document.getElementById("mapa").appendChild(lat);  		
    	}
       	for(var i=0;waypoints.length>i;i++){
       		if(i!=0)points+=";";       		
       		points+=("("+waypoints[i].lat+","+waypoints[i].lng+")");
       	}
       	//populate input
    	$("#inputPoints").val(points);    	
    }
    map.on('click', updateRouteInfo);
    
